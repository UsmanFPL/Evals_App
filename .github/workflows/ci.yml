name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_evals
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
    
    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      id: cache-venv
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: poetry-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction --no-root
        poetry install
    
    - name: Lint with ruff
      run: |
        poetry run ruff check .
    
    - name: Format with black
      run: |
        poetry run black --check .
    
    - name: Install test dependencies
      run: |
        poetry add --dev pytest pytest-asyncio pytest-cov httpx
        poetry install

    - name: Run tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_evals
        REDIS_URL: redis://localhost:6379/0
      run: |
        poetry run pytest tests/ -v --cov=./ --cov-report=xml --log-cli-level=INFO
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Frontend tests are disabled for now
  # frontend:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v3
  #   
  #   - name: Use Node.js 18
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #   
  #   - name: Install dependencies
  #     working-directory: ./frontend
  #     run: npm ci
  #   
  #   - name: Lint
  #     working-directory: ./frontend
  #     run: npm run lint
  #   
  #   - name: Build
  #     working-directory: ./frontend
  #     run: npm run build
  #   
  #   - name: Test
  #     working-directory: ./frontend
  #     run: npm test
